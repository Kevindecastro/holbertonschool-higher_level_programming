#!/usr/bin/python3
"""Tests unitaires pour max_integer([..])
"""
import unittest
max_integer = __import__('6-max_integer').max_integer

class TestMaxInteger(unittest.TestCase):
    """Cas de test pour la fonction max_integer"""

    def test_regular_case(self):
        """Test avec une liste normale d'entiers"""
        self.assertEqual(max_integer([1, 2, 3, 4]), 4)

    def test_another_regular_case(self):
        """Test avec une autre liste d'entiers"""
        self.assertEqual(max_integer([1, 3, 4, 2]), 4)

    def test_single_element(self):
        """Test avec un seul élément dans la liste"""
        self.assertEqual(max_integer([10]), 10)

    def test_empty_list(self):
        """Test avec une liste vide"""
        self.assertEqual(max_integer([]), None)

    def test_negative_numbers(self):
        """Test avec une liste de nombres négatifs"""
        self.assertEqual(max_integer([-1, -2, -3, -4]), -1)

    def test_mixed_numbers(self):
        """Test avec une liste contenant à la fois des nombres positifs et négatifs"""
        self.assertEqual(max_integer([1, -2, 3, -4]), 3)

    def test_floats(self):
        """Test avec une liste de nombres flottants"""
        self.assertEqual(max_integer([1.5, 2.5, 3.5]), 3.5)

    def test_repeated_values(self):
        """Test avec une liste contenant des valeurs maximales répétées"""
        self.assertEqual(max_integer([1, 3, 3, 2]), 3)

    def test_string_elements(self):
        """Test avec une liste de chaînes de caractères (cas invalide)"""
        with self.assertRaises(TypeError):
            max_integer(["a", "b", "c"])

    def test_none(self):
        """Test avec None comme entrée"""
        with self.assertRaises(TypeError):
            max_integer(None)

if __name__ == '__main__':
    unittest.main()
